package com.codeup.adlister.dao;
import com.codeup.adlister.models.Ad;
import com.codeup.adlister.models.Config;
import com.mysql.cj.jdbc.Driver;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MySQLAdsDao implements Ads {

    // provides an abstract interface to the adlister_db ads table
    private Connection connection;

    // constructor: connect to the database
    public MySQLAdsDao(Config config) {
        try {
            // database driver that communicates with MySQL from this JAVA app
            DriverManager.registerDriver(new Driver());
            connection = DriverManager.getConnection(
                config.getUrl(),
                config.getUser(),
                config.getPassword()
            );
        } catch (SQLException e) {
            throw new RuntimeException("Error connecting to the database!", e);
        }
    }// MySQLAdsDao

    @Override  // List of all Ads
    public List<Ad> all() {
        Statement stmt = null;
        try {
            // statement object that represents an individual SQL statement
            stmt = connection.createStatement();
            // the result of running the SQL command
            ResultSet rs = stmt.executeQuery("SELECT * FROM ads");
            // returns a list of all ads on the database
            return createAdsFromResults(rs);
        } catch (SQLException e) {
            throw new RuntimeException("Error retrieving all ads.", e);
        }
    }// all

    @Override
    public Long insert(Ad ad) {
        try {
            // preparedStatement object that represents an individual SQL statement
            // The Statement.RETURN_GENERATED_KEYS gives access to the ids that are autogenerated by the database when inserting a record.
            PreparedStatement stmt = connection.prepareStatement(
                    "INSERT INTO ads(user_id, title, description) VALUES(?,?,?)",
                    Statement.RETURN_GENERATED_KEYS);
            // safely set values into the SQL query placeholder ? with the user inputs
            stmt.setLong(1, ad.getUserId());
            stmt.setString(2, ad.getTitle());
            stmt.setString(3, ad.getDescription());
            // The executeUpdate() method is used to insert, update, and delete rows in those tables.
            // The return value of executeUpdate() is an integer value that reports the number of rows affected by the SQL statement.
            stmt.executeUpdate();
            // The getGeneratedKeys() method gives a result set object that holds any ids that were generated by the database.
            ResultSet rs = stmt.getGeneratedKeys();
            // It shifts the cursor to the next row of the result set from the database and returns true if there is any row, otherwise false.
            rs.next();
            // use getLong to retrieve the generated id, and pass 1 to indicate that we want the first result in the result set.
            // Value can be retrieved from result set objects either by column name or column number (starting at 1).
            // Generally the column name is preferred, but in this case our result set contains a single value for each row, so we can access it with the 1.
            return rs.getLong(1);
        } catch (SQLException e) {
            throw new RuntimeException("Error creating a new ad.", e);
        }
    }// insert

    // convert an ad from the result set into an Ad object
    private Ad extractAd(ResultSet rs) throws SQLException {
        // return instantiated Ad object
        return new Ad(
            rs.getLong("id"),
            rs.getLong("user_id"),
            rs.getString("title"),
            rs.getString("description")
        );
    }

    // create a list of Ad objects from the ads table
    private List<Ad> createAdsFromResults(ResultSet rs) throws SQLException {
        // initialize a list of ad objects
        List<Ad> ads = new ArrayList<>();
        // iterate through the results returned from the database
        while (rs.next()) {
            // add an Ad object to the ads list
            ads.add(extractAd(rs));
        }
        // return the ads list
        return ads;
    }
}