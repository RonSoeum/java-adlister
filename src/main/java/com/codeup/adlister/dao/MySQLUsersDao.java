package com.codeup.adlister.dao;
import com.codeup.adlister.models.Config;
import com.codeup.adlister.models.User;
import com.mysql.cj.jdbc.Driver;
import java.sql.*;

// provides an abstract interface to the adlister_db users table
public class MySQLUsersDao implements Users {

    // connection object that represents a database connection, one per DAO
    private Connection connection;

    // constructor: connect to the database
    public MySQLUsersDao(Config config) {
        try {
            // database driver that communicates with MySQL from this JAVA app
            DriverManager.registerDriver(new Driver());
            connection = DriverManager.getConnection(
                    config.getUrl(),
                    config.getUser(),
                    config.getPassword()
            );
        } catch (SQLException e) {
            throw new RuntimeException("Error connecting to the database!", e);
        }
    }// MySQLUsersDao

    @Override  // INSERT a new user into the users table of the adlister_db database
    public Long insert(User user) {
        try {
            // preparedStatement object that represents an individual SQL statement
            // The Statement.RETURN_GENERATED_KEYS gives access to the ids that are autogenerated by the database when inserting a record.
            PreparedStatement stmt = connection.prepareStatement(
                    "INSERT INTO users(username, email, password) VALUES(?,?,?)",
                    Statement.RETURN_GENERATED_KEYS
            );
            // safely set values into the SQL query placeholder ? with the user inputs
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getPassword());
            // The executeUpdate() method is used to insert, update, and delete rows in those tables.
            // The return value of executeUpdate() is an integer value that reports the number of rows affected by the SQL statement.
            stmt.executeUpdate();
            // The getGeneratedKeys() method gives a result set object that holds any ids that were generated by the database.
            ResultSet rs = stmt.getGeneratedKeys();
            // It shifts the cursor to the next row of the result set from the database and returns true if there is any row, otherwise false.
            rs.next();
            // use getLong to retrieve the generated id, and pass 1 to indicate that we want the first result in the result set.
            // Value can be retrieved from result set objects either by column name or column number (starting at 1).
            // Generally the column name is preferred, but in this case our result set contains a single value for each row, so we can access it with the 1.
            return rs.getLong(1);
        } catch (SQLException e) {
            throw new RuntimeException("Error creating a new ad.", e);
        }
    }// insert

    @Override  // find a user in the users table by the username
    public User findByUsername(String username) {
        try {
            // preparedStatement object that represents an individual SQL statement
            PreparedStatement stmt = connection.prepareStatement(
                    "SELECT * FROM users WHERE username = ? LIMIT 1"
            );
            // safely set values into the SQL query placeholder ? with the username
            stmt.setString(1, username);
            // execute select statement and returns instantiated User object
            return extractUser(stmt.executeQuery());
        } catch (SQLException e) {
            throw new RuntimeException("Error finding by username.", e);
        }
    }// findByUsername

    // convert a user from the result set into a User object
    private User extractUser(ResultSet rs) throws SQLException {
        // It shifts the cursor to the next row of the result set from the database and returns true if there is any row, otherwise false.
        if (! rs.next()) {
            return null;
        }
        // return instantiated User object
        return new User(
                rs.getLong("id"),
                rs.getString("username"),
                rs.getString("email"),
                rs.getString("password")
        );
    }// extractUser

}// class